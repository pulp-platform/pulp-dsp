<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="group__BasicDotProdKernels" kind="group">
    <compoundname>BasicDotProdKernels</compoundname>
    <title>Vector Dot Product Kernels</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__BasicDotProdKernels_1gaf616c8990844632b48e3dcc9693c14ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_f32p_xpulpv2</definition>
        <argsstring>(void *S)</argsstring>
        <name>plp_dot_prod_f32p_xpulpv2</name>
        <param>
          <type>void *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Parallel dot product with interleaved access of 32-bit float vectors kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance structure for float parallel dot product </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32p_xpulpv2.c" line="54" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32p_xpulpv2.c" bodystart="54" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga72206bbec6ef8a9cae40094db94c65d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_f32s_rv32im</definition>
        <argsstring>(const float32_t *__restrict__ pSrcA, const float32_t *__restrict__ pSrcB, uint32_t blockSize, float32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_f32s_rv32im</name>
        <param>
          <type>const float32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Glue code for dot product of 32-bit float vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32s_rv32im.c" line="51" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32s_rv32im.c" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga709949a31d4a8288099b7a5580f1784f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_f32s_xpulpv2</definition>
        <argsstring>(const float32_t *__restrict__ pSrcA, const float32_t *__restrict__ pSrcB, uint32_t blockSize, float32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_f32s_xpulpv2</name>
        <param>
          <type>const float32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Glue code for dot product of 32-bit float vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32s_xpulpv2.c" line="51" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_f32s_xpulpv2.c" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga3f755e8fa326d4c2c33b1aacf3fa4f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i16s_rv32im</definition>
        <argsstring>(const int16_t *__restrict__ pSrcA, const int16_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i16s_rv32im</name>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 16-bit integer vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectorized dot product of 16-bit integer vectors kernel for RV32IM extension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>When the ISA supports, the 16 bit values are packed two by two into 32 bit vectors and then the two dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. RV32IM doesn&apos;t support SIMD. For SIMD, check out other ISA extensions (e.g. XPULPV2). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i16s_rv32im.c" line="61" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i16s_rv32im.c" bodystart="61" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga7de582a30abadf7f29adb91f8774fbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i16s_xpulpv2</definition>
        <argsstring>(const int16_t *__restrict__ pSrcA, const int16_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i16s_xpulpv2</name>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Vectorized dot product of 16-bit integer vectors singlecore kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectorized dot product of 16-bit integer vectors kernel singlecore for XPULPV2 extension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>The 16 bit values are packed two by two into 32 bit vectors and then the two dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i16s_xpulpv2.c" line="60" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i16s_xpulpv2.c" bodystart="60" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga4a07c9d341f6707ed4129976f62d6033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i32p_xpulpv2</definition>
        <argsstring>(void *S)</argsstring>
        <name>plp_dot_prod_i32p_xpulpv2</name>
        <param>
          <type>void *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Parallel dot product with interleaved access of 32-bit integer vectors kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance structure for integer parallel dot product </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32p_xpulpv2.c" line="54" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32p_xpulpv2.c" bodystart="54" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga5abc35a7e6b985a1e997524689428aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i32s_rv32im</definition>
        <argsstring>(const int32_t *__restrict__ pSrcA, const int32_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i32s_rv32im</name>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 32-bit integer vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32s_rv32im.c" line="83" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32s_rv32im.c" bodystart="83" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1gadba58e7cc549bfe03a029f50f80ff182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i32s_xpulpv2</definition>
        <argsstring>(const int32_t *__restrict__ pSrcA, const int32_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i32s_xpulpv2</name>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 32-bit integer vectors kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32s_xpulpv2.c" line="56" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i32s_xpulpv2.c" bodystart="56" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga2b6f263975070b4542cc4880c9c6797c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i8s_rv32im</definition>
        <argsstring>(const int8_t *__restrict__ pSrcA, const int8_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i8s_rv32im</name>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 8-bit integer vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para>Vectorized dot product of 8-bit integer vectors kernel for RV32IM extension.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [8] bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>When the ISA supports, the 8 bit values are packed four by four into 32 bit vectors and then the four dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. RV32IM doesn&apos;t support SIMD. For SIMD, check out other ISA extensions (e.g. XPULPV2). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i8s_rv32im.c" line="61" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i8s_rv32im.c" bodystart="61" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga2eca347975dc9bebf37e73516dc73d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_i8s_xpulpv2</definition>
        <argsstring>(const int8_t *__restrict__ pSrcA, const int8_t *__restrict__ pSrcB, uint32_t blockSize, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_i8s_xpulpv2</name>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Vectorized dot product of 8-bit integer vectors singlecore kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>The 8 bit values are packed four by four into 32 bit vectors and then the four dot products are performed on 32 bit vectors, with 32 bit accumulator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i8s_xpulpv2.c" line="60" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_i8s_xpulpv2.c" bodystart="60" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga38f10f297f8b71bb4efcee85c9b74c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q16s_rv32im</definition>
        <argsstring>(const int16_t *__restrict__ pSrcA, const int16_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q16s_rv32im</name>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 16-bit fixed point vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>When the ISA supports, the 16 bit values are packed two by two into 32 bit vectors and then the two dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. RV32IM doesn&apos;t support SIMD. For SIMD, check out other ISA extensions (e.g. XPULPV2). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q16s_rv32im.c" line="62" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q16s_rv32im.c" bodystart="62" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga23d9f1ddd572333c1fe7400714179826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q16s_xpulpv2</definition>
        <argsstring>(const int16_t *__restrict__ pSrcA, const int16_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q16s_xpulpv2</name>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int16_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Vectorized dot product of 16-bit fixed point vectors singlecore kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [16 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>The 16 bit values are packed two by two into 32 bit vectors and then the two dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q16s_xpulpv2.c" line="62" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q16s_xpulpv2.c" bodystart="62" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1gac2d8fe5e567fddd49da56351b1f45d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q32p_xpulpv2</definition>
        <argsstring>(void *S)</argsstring>
        <name>plp_dot_prod_q32p_xpulpv2</name>
        <param>
          <type>void *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Parallel dot product with interleaved access of 32-bit fixed point vectors kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance structure for fixed point parallel dot product </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32p_xpulpv2.c" line="54" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32p_xpulpv2.c" bodystart="54" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga2285316fd0f49b810473eb3533a35559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q32s_rv32im</definition>
        <argsstring>(const int32_t *__restrict__ pSrcA, const int32_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q32s_rv32im</name>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 32-bit fixed point vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32s_rv32im.c" line="57" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32s_rv32im.c" bodystart="57" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga8dc537c56e72dadb1134fac77e9df399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q32s_xpulpv2</definition>
        <argsstring>(const int32_t *__restrict__ pSrcA, const int32_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q32s_xpulpv2</name>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int32_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 32-bit fixed point vectors kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32s_xpulpv2.c" line="57" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q32s_xpulpv2.c" bodystart="57" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1gaf5347e1036975eb9515e500373fcbcac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q8s_rv32im</definition>
        <argsstring>(const int8_t *__restrict__ pSrcA, const int8_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q8s_rv32im</name>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 8-bit fixed point vectors kernel for RV32IM extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>When the ISA supports, the 8 bit values are packed four by four into 32 bit vectors and then the four dot products are performed simultaneously on 32 bit vectors, with 32 bit accumulator. RV32IM doesn&apos;t support SIMD. For SIMD, check out other ISA extensions (e.g. XPULPV2). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q8s_rv32im.c" line="62" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q8s_rv32im.c" bodystart="62" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProdKernels_1ga6f89bf44197d357d07545c7d717d1362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_dot_prod_q8s_xpulpv2</definition>
        <argsstring>(const int8_t *__restrict__ pSrcA, const int8_t *__restrict__ pSrcB, uint32_t blockSize, uint32_t deciPoint, int32_t *__restrict__ pRes)</argsstring>
        <name>plp_dot_prod_q8s_xpulpv2</name>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const int8_t *__restrict__</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deciPoint</declname>
        </param>
        <param>
          <type>int32_t *__restrict__</type>
          <declname>pRes</declname>
        </param>
        <briefdescription>
<para>Scalar dot product of 8-bit fixed point vectors singlecore kernel for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector [8 bit] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deciPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>decimal point for right shift </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pRes</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here [32 bit] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para>
</simplesect>
<simplesect kind="par"><title>Exploiting SIMD instructions</title><para>The 8 bit values are packed four by four into 32 bit vectors and then the four dot products are performed on 32 bit vectors, with 32 bit accumulator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q8s_xpulpv2.c" line="61" column="6" bodyfile="/github/workspace/src/BasicMathFunctions/dot_prod/kernels/plp_dot_prod_q8s_xpulpv2.c" bodystart="61" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Computes the scalar dot product of two vectors. The vectors are multiplied element-by-element and then summed. <preformatted>
    sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
</preformatted> There are separate functions for floating-point, int8, int16, and int32 data types. For lower precision integers (int8, int16), functions exploiting SIMD instructions are provided.</para>
<para>The naming of the functions follows the following pattern (for example plp_dot_prod_i32s_rv32im): <preformatted>
    &lt;pulp&gt; _ &lt;function name&gt; _ &lt;data type&gt;&lt;precision&gt;&lt;method&gt;_&lt;isa extension&gt;, with

    data type = {f, i, q} respectively for floats, integers, fixed points

    precision = {32, 16, 8} bits

    method = {s, p} respectively meaning single core or parallel multicore implementation.

    isa extension = rv32im, xpulpv2, etc. of which rv32im is the most general one.

</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>

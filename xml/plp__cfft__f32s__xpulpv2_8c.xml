<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="plp__cfft__f32s__xpulpv2_8c" kind="file" language="C++">
    <compoundname>plp_cfft_f32s_xpulpv2.c</compoundname>
    <includes refid="plp__math_8h" local="yes">plp_math.h</includes>
    <incdepgraph>
      <node id="2">
        <label>plp_math.h</label>
        <link refid="plp__math_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>rtos_hal.h</label>
        <link refid="rtos__hal_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c</label>
        <link refid="plp__cfft__f32s__xpulpv2_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>rt/rt_api.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="plp__cfft__f32s__xpulpv2_8c_1a430e6a879ba1300b2eaee4fbab8490ab" prot="public" static="yes" mutable="no">
        <type>HAL_CL_L1 float32_t</type>
        <definition>HAL_CL_L1 float32_t ROT_CONST</definition>
        <argsstring></argsstring>
        <name>ROT_CONST</name>
        <initializer>= 0.707106781f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="33" column="28" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1ad5533266a1c64737df3bb7fa7bd0c61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bit_rev_radix2</definition>
        <argsstring>(int index, int log2FFTLen)</argsstring>
        <name>bit_rev_radix2</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>log2FFTLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end of complexFFTKernels group </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="435" column="5" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="435" bodyend="446" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1acbebafa6ec6965a2562fca1fe2987b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bit_rev_radix4</definition>
        <argsstring>(int index, int log2FFTLen)</argsstring>
        <name>bit_rev_radix4</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>log2FFTLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="448" column="5" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="448" bodyend="460" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a871bfae57e48289b6f642ebef5f3cf84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bit_rev_radix8</definition>
        <argsstring>(int index, int log2FFTLen)</argsstring>
        <name>bit_rev_radix8</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>log2FFTLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="462" column="5" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="462" bodyend="474" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="39" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a2c88c3fe9c928367cd90ed563280d720" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref></type>
        <definition>static Complex_type_f32 complex_mul</definition>
        <argsstring>(Complex_type_f32 A, Complex_type_f32 B)</argsstring>
        <name>complex_mul</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="476" column="32" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="476" bodyend="482" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="41" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1acb38fad22ac845a0088ed3115bd7cc63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_radix2</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int twiddle_index, int index, int distance, Complex_type_f32 *twiddle_ptr)</argsstring>
        <name>process_butterfly_radix2</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>twiddle_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>twiddle_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="484" column="20" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="484" bodyend="512" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="43" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a3fc8fdd4857795b93b747943bb0a3ba6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_last_radix2</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int outindex)</argsstring>
        <name>process_butterfly_last_radix2</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="515" column="1" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="515" bodyend="535" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="50" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a4206b43901e5db67ded73489c52cce2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_radix4</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int twiddle_index, int index, int distance, Complex_type_f32 *twiddle_ptr)</argsstring>
        <name>process_butterfly_radix4</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>twiddle_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>twiddle_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="537" column="20" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="537" bodyend="585" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="52" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a9429e7d2663e92ce8ae53984f48bfa84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_last_radix4</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int outindex)</argsstring>
        <name>process_butterfly_last_radix4</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="707" column="20" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="707" bodyend="746" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="59" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1a4e11eb4b0c32764e7eb19dfc936db8b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_radix8</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int twiddle_index, int index, int distance, Complex_type_f32 *twiddle_ptr)</argsstring>
        <name>process_butterfly_radix8</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>twiddle_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>twiddle_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="587" column="20" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="587" bodyend="705" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="61" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="plp__cfft__f32s__xpulpv2_8c_1ae705ef86080a3ece707ed163262a062f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void process_butterfly_last_radix8</definition>
        <argsstring>(Complex_type_f32 *input, Complex_type_f32 *output, int outindex)</argsstring>
        <name>process_butterfly_last_radix8</name>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="748" column="20" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="748" bodyend="862" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="68" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__complexFFTKernels_1ga80f33ad1b0375c6b4f4e2de029a3e631" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void plp_cfft_radix2_f32s_xpulpv2</definition>
        <argsstring>(const plp_cfft_instance_f32 *S, const float32_t *pSrc, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>plp_cfft_radix2_f32s_xpulpv2</name>
        <param>
          <type>const <ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="135" column="13" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="135" bodyend="233" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__complexFFTKernels_1gaf57cd0c71cbe0f2cf89f766a5313ce09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void plp_cfft_radix4_f32s_xpulpv2</definition>
        <argsstring>(const plp_cfft_instance_f32 *S, const float32_t *pSrc, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>plp_cfft_radix4_f32s_xpulpv2</name>
        <param>
          <type>const <ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="235" column="13" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="235" bodyend="331" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="75" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__complexFFTKernels_1ga50ff6a59379ed4217a9f6ddeb66275b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void plp_cfft_radix8_f32s_xpulpv2</definition>
        <argsstring>(const plp_cfft_instance_f32 *S, const float32_t *pSrc, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>plp_cfft_radix8_f32s_xpulpv2</name>
        <param>
          <type>const <ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="333" column="13" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="333" bodyend="429" declfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" declline="80" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__complexFFTKernels_1ga9d40c003bac71fe9cedbd6ecdff21b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plp_cfft_f32s_xpulpv2</definition>
        <argsstring>(const plp_cfft_instance_f32 *S, const float32_t *pSrc, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>plp_cfft_f32s_xpulpv2</name>
        <param>
          <type>const <ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Floating-point FFT on complex input data for XPULPV2 extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FFT structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects forwart (ifftFlag=0) or inverse (ifftFlag=1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables (bitReverseFlag=1) of disables (bitReverseFlag=0) bit reversal of output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" line="113" column="6" bodyfile="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c" bodystart="113" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>=====================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Project:<sp/><sp/><sp/><sp/><sp/><sp/>PULP<sp/>DSP<sp/>Library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Title:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plp_cfft_f32s_xpulpv2.c</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Description:<sp/><sp/>Floating-point<sp/>FFT<sp/>on<sp/>complex<sp/>input<sp/>data<sp/>for<sp/>XPULPV2</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>$Date:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10.<sp/>August<sp/>2020</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>$Revision:<sp/><sp/><sp/><sp/>V1</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Target<sp/>Processor:<sp/>PULP<sp/>cores<sp/>with<sp/>&quot;F&quot;<sp/>support<sp/>(wolfe,<sp/>vega)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>=====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>ETH<sp/>Zurich<sp/>and<sp/>University<sp/>of<sp/>Bologna.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Giuseppe<sp/>Tagliavini,<sp/>University<sp/>of<sp/>Bologna</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="plp__math_8h" kindref="compound">plp_math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HAL_CL_L1<sp/>float32_t<sp/>ROT_CONST<sp/>=<sp/>0.707106781f;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>HELPER<sp/>FUNCTIONS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix8(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>complex_mul(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>A,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>B);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix2(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*twiddle_ptr);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_last_radix2(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix4(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*twiddle_ptr);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_last_radix4(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix8(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*twiddle_ptr);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_last_radix8(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix2_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix4_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix8_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__complexFFTKernels_1ga9d40c003bac71fe9cedbd6ecdff21b52" kindref="member">plp_cfft_f32s_xpulpv2</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(S-&gt;fftLen)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>64:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>512:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plp_cfft_radix8_f32s_xpulpv2(S,<sp/>pSrc,<sp/>ifftFlag,<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>256:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1024:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plp_cfft_radix4_f32s_xpulpv2(S,<sp/>pSrc,<sp/>ifftFlag,<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>32:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>128:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2048:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plp_cfft_radix2_f32s_xpulpv2(S,<sp/>pSrc,<sp/>ifftFlag,<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix2_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>j,<sp/>stage,<sp/>step,<sp/>d,<sp/>index;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>temp;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbutterfly<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>butt<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>butterflies<sp/>in<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_in_ptr;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_out_ptr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_tw_ptr;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIRST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>_tw_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)S-&gt;pTwiddle;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbutterfly;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix2(_in_ptr,<sp/>_in_ptr,<sp/>j,<sp/>0,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STAGES<sp/>2<sp/>-&gt;<sp/>n-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>dist<sp/>&lt;&lt;<sp/>1;<sp/></highlight><highlight class="comment">//identifies<sp/>the<sp/>starting<sp/>point<sp/>of<sp/>the<sp/>new<sp/>butterfly<sp/>wing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>butt;<sp/>j++)<sp/>{<sp/></highlight><highlight class="comment">//this<sp/>loop<sp/>loops<sp/>over<sp/>the<sp/>butterflies<sp/>for<sp/>layers<sp/>(1,2,4,8,...)<sp/><sp/>butt<sp/>doubles<sp/>at<sp/>each<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dist;<sp/>d++)<sp/>{<sp/></highlight><highlight class="comment">//is<sp/>the<sp/>index<sp/>over<sp/>couples<sp/>for<sp/>each<sp/>butterfly,<sp/>it<sp/>can<sp/>at<sp/>maximum<sp/>equal<sp/>the<sp/>distance<sp/>dist<sp/>between<sp/>couple<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix2(_in_ptr,<sp/>_in_ptr,<sp/>d<sp/>*<sp/>butt,<sp/>j<sp/>*<sp/>step,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>butt<sp/>=<sp/>butt<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LAST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(S-&gt;fftLen<sp/>&gt;&gt;<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_last_radix2(_in_ptr,<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc,<sp/>index);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ORDER<sp/>VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index1,<sp/>index2,<sp/>index3,<sp/>index4;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>S-&gt;fftLen;<sp/>j<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S-&gt;pBitRevTable)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index12<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j]));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index34<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j<sp/>+<sp/>2]));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>index12<sp/>&amp;<sp/>0x0000FFFF;<sp/><sp/></highlight><highlight class="comment">//Takes<sp/>the<sp/>16<sp/>LSBs<sp/>of<sp/>the<sp/>first<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>index12<sp/>&gt;&gt;<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Takes<sp/>the<sp/>16<sp/>MSBs<sp/>of<sp/>the<sp/>first<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>index34<sp/>&amp;<sp/>0x0000FFFF;<sp/><sp/></highlight><highlight class="comment">//Takes<sp/>the<sp/>16<sp/>LSBs<sp/>of<sp/>the<sp/>second<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>index34<sp/>&gt;&gt;<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Takes<sp/>the<sp/>16<sp/>LSBs<sp/>of<sp/>the<sp/>second<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen<sp/>=<sp/>log2(S-&gt;fftLen);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>bit_rev_radix2(j,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>bit_rev_radix2(j<sp/>+<sp/>1,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>bit_rev_radix2(j<sp/>+<sp/>2,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>bit_rev_radix2(j<sp/>+<sp/>3,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index1<sp/>&gt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j]<sp/>=<sp/>_out_ptr[index1];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index2<sp/>&gt;<sp/>j<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>1]<sp/>=<sp/>_out_ptr[index2];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index3<sp/>&gt;<sp/>j<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>2]<sp/>=<sp/>_out_ptr[index3];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index3]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index4<sp/>&gt;<sp/>j<sp/>+<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>3]<sp/>=<sp/>_out_ptr[index4];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index4]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix4_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>j,<sp/>stage,<sp/>step,<sp/>d,<sp/>index;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>temp;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbutterfly<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>butt<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>butterflies<sp/>in<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_in_ptr;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_out_ptr;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_tw_ptr;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIRST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>_tw_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)S-&gt;pTwiddle;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbutterfly;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix4(_in_ptr,<sp/>_out_ptr,<sp/>j,<sp/>0,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr++;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STAGES<sp/>2<sp/>-&gt;<sp/>n-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>dist<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>butt;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dist;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix4(_in_ptr,<sp/>_in_ptr,<sp/>d<sp/>*<sp/>butt,<sp/>j<sp/>*<sp/>step,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>butt<sp/>=<sp/>butt<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LAST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(S-&gt;fftLen<sp/>&gt;&gt;<sp/>2);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_last_radix4(_in_ptr,<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc,<sp/>index);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ORDER<sp/>VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index1,<sp/>index2,<sp/>index3,<sp/>index4;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>S-&gt;fftLen;<sp/>j<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S-&gt;pBitRevTable)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index12<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j]));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index34<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j<sp/>+<sp/>2]));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>index12<sp/>&amp;<sp/>0x0000FFFF;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>index12<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>index34<sp/>&amp;<sp/>0x0000FFFF;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>index34<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen<sp/>=<sp/>log2(S-&gt;fftLen);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>bit_rev_radix4(j,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>bit_rev_radix4(j<sp/>+<sp/>1,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>bit_rev_radix4(j<sp/>+<sp/>2,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>bit_rev_radix4(j<sp/>+<sp/>3,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index1<sp/>&gt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j]<sp/>=<sp/>_out_ptr[index1];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index2<sp/>&gt;<sp/>j<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>1]<sp/>=<sp/>_out_ptr[index2];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index3<sp/>&gt;<sp/>j<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>2]<sp/>=<sp/>_out_ptr[index3];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index3]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index4<sp/>&gt;<sp/>j<sp/>+<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>3]<sp/>=<sp/>_out_ptr[index4];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index4]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plp_cfft_radix8_f32s_xpulpv2(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplp__cfft__instance__f32" kindref="compound">plp_cfft_instance_f32</ref><sp/>*S,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pSrc,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/>j,<sp/>stage,<sp/>step,<sp/>d,<sp/>index;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>temp;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbutterfly<sp/>=<sp/>S-&gt;fftLen<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>butt<sp/>=<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>butterflies<sp/>in<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_in_ptr;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_out_ptr;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*_tw_ptr;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIRST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>_tw_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)S-&gt;pTwiddle;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbutterfly;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix8(_in_ptr,<sp/>_out_ptr,<sp/>j,<sp/>0,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr++;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STAGES<sp/>2<sp/>-&gt;<sp/>n-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dist<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>dist<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>butt;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dist;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_radix8(_in_ptr,<sp/>_in_ptr,<sp/>d<sp/>*<sp/>butt,<sp/>j<sp/>*<sp/>step,<sp/>dist,<sp/>_tw_ptr);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr++;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stage<sp/>=<sp/>stage<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>butt<sp/>=<sp/>butt<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LAST<sp/>STAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>_in_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(S-&gt;fftLen<sp/>&gt;&gt;<sp/>3);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_butterfly_last_radix8(_in_ptr,<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc,<sp/>index);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_in_ptr<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ORDER<sp/>VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index1,<sp/>index2,<sp/>index3,<sp/>index4;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr<sp/>=<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*)pSrc;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>S-&gt;fftLen;<sp/>j<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bitReverseFlag)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index12<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j]));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index34<sp/>=<sp/>*((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;S-&gt;pBitRevTable[j<sp/>+<sp/>2]));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>index12<sp/>&amp;<sp/>0x0000FFFF;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>index12<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>index34<sp/>&amp;<sp/>0x0000FFFF;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>index34<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen<sp/>=<sp/>log2(S-&gt;fftLen);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index1<sp/>=<sp/>bit_rev_radix8(j,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index2<sp/>=<sp/>bit_rev_radix8(j<sp/>+<sp/>1,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index3<sp/>=<sp/>bit_rev_radix8(j<sp/>+<sp/>2,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index4<sp/>=<sp/>bit_rev_radix8(j<sp/>+<sp/>3,<sp/>log2FFTLen);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index1<sp/>&gt;<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j]<sp/>=<sp/>_out_ptr[index1];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index2<sp/>&gt;<sp/>j<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>1]<sp/>=<sp/>_out_ptr[index2];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index3<sp/>&gt;<sp/>j<sp/>+<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>2]<sp/>=<sp/>_out_ptr[index3];</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index3]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index4<sp/>&gt;<sp/>j<sp/>+<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>_out_ptr[j<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[j<sp/>+<sp/>3]<sp/>=<sp/>_out_ptr[index4];</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out_ptr[index4]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>revNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>log2FFTLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>(index<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>revNum<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>((log2FFTLen<sp/>-<sp/>1)<sp/>-<sp/>i));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>revNum;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen)<sp/></highlight><highlight class="comment">//digit<sp/>reverse<sp/>2<sp/>bit<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>revNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>log2FFTLen/2;<sp/>i++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>revNum<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>revNum<sp/>|=<sp/>(index<sp/>&amp;<sp/>0x3);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&gt;&gt;=<sp/>2;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>revNum;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_rev_radix8(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>log2FFTLen)<sp/></highlight><highlight class="comment">//digit<sp/>reverse<sp/>3<sp/>bit<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>revNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>log2FFTLen/3;<sp/>i++)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>revNum<sp/>&lt;&lt;=<sp/>3;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>revNum<sp/>|=<sp/>(index<sp/>&amp;<sp/>0x7);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>&gt;&gt;=<sp/>3;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>revNum;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>complex_mul(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>A,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>result;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>result.re<sp/>=<sp/>A.re<sp/>*<sp/>B.re<sp/>-<sp/>A.im<sp/>*<sp/>B.im;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>result.im<sp/>=<sp/>A.re<sp/>*<sp/>B.im<sp/>+<sp/>A.im<sp/>*<sp/>B.re;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix2(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*twiddle_ptr)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>d0<sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>d1<sp/>=<sp/>input[index<sp/>+<sp/>distance].re;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>e0<sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>e1<sp/>=<sp/>input[index<sp/>+<sp/>distance].im;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.re<sp/>=<sp/>d0<sp/>+<sp/>d1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>r1.re<sp/>=<sp/>d0<sp/>-<sp/>d1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.im<sp/>=<sp/>e0<sp/>+<sp/>e1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>r1.im<sp/>=<sp/>e0<sp/>-<sp/>e1;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>tw0<sp/>=<sp/>twiddle_ptr[twiddle_index];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>output[index]<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>output[index<sp/>+<sp/>distance]<sp/>=<sp/>complex_mul(tw0,<sp/>r1);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">process_butterfly_last_radix2(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>d0<sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>d1<sp/>=<sp/>input[index<sp/>+<sp/>1].re;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>e0<sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>e1<sp/>=<sp/>input[index<sp/>+<sp/>1].im;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.re<sp/>=<sp/>d0<sp/>+<sp/>d1;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>r1.re<sp/>=<sp/>d0<sp/>-<sp/>d1;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.im<sp/>=<sp/>e0<sp/>+<sp/>e1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>r1.im<sp/>=<sp/>e0<sp/>-<sp/>e1;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>the<sp/>Last<sp/>step,<sp/>twiddle<sp/>factors<sp/>are<sp/>all<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>output[outindex]<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>output[outindex<sp/>+<sp/>1]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix4<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>twiddle_ptr)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>d0,<sp/>d1,<sp/>d2,<sp/>d3;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>e0,<sp/>e1,<sp/>e2,<sp/>e3;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>tw1,<sp/>tw2,<sp/>tw3;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>d1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+distance].re;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>d2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2*distance].re;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>d3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3*distance].re;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>e0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+distance].im;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>e2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2*distance].im;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>e3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3*distance].im;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>buttefly<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>r0<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>r1<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>r2<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>0.0000<sp/>+<sp/>1.0000i</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>r3<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r0.re<sp/>=<sp/>d0<sp/>+<sp/>d1<sp/>+<sp/>d2<sp/>+<sp/>d3;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r1.re<sp/>=<sp/>d0<sp/>-<sp/>d2<sp/>-<sp/>(<sp/>e3<sp/>-<sp/>e1<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r2.re<sp/>=<sp/>d0<sp/>-<sp/>d1<sp/>+<sp/>d2<sp/>-<sp/>d3;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r3.re<sp/>=<sp/>d0<sp/>-<sp/>d2<sp/>-<sp/>(<sp/>e1<sp/>-<sp/>e3<sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r0.im<sp/>=<sp/>e0<sp/>+<sp/>e1<sp/>+<sp/>e2<sp/>+<sp/>e3;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>output[index]<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r1.im<sp/>=<sp/>-d1<sp/>+<sp/>d3<sp/>+<sp/>e0<sp/>-<sp/>e2;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r2.im<sp/>=<sp/>e0<sp/>-<sp/>e1<sp/>+<sp/>e2<sp/>-<sp/>e3;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>r3.im<sp/>=<sp/>d1<sp/>-<sp/>d3<sp/>+<sp/>e0<sp/>-<sp/>e2;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tw1<sp/>=<sp/>twiddle_ptr[twiddle_index];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tw2<sp/>=<sp/>twiddle_ptr[twiddle_index*2];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tw3<sp/>=<sp/>twiddle_ptr[twiddle_index*3];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>output[index+distance]<sp/><sp/><sp/>=<sp/>complex_mul(tw1,<sp/>r1);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>output[index+2*distance]<sp/>=<sp/>complex_mul(tw2,<sp/>r2);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>output[index+3*distance]<sp/>=<sp/>complex_mul(tw3,<sp/>r3);</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_radix8<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twiddle_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>twiddle_ptr)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0,<sp/>e1,<sp/>e2,<sp/>e3,<sp/>e4,<sp/>e5,<sp/>e6,<sp/>e7;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3,<sp/>r4,<sp/>r5,<sp/>r6,<sp/>r7;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>tw1,<sp/>tw2,<sp/>tw3,<sp/>tw4,<sp/>tw5,<sp/>tw6,<sp/>tw7;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>d1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+distance].re;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>d2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2*distance].re;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>d3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3*distance].re;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>d4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+4*distance].re;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>d5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+5*distance].re;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>d6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+6*distance].re;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>d7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+7*distance].re;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>e0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+distance].im;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>e2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2*distance].im;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>e3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3*distance].im;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>e4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+4*distance].im;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>e5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+5*distance].im;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>e6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+6*distance].im;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>e7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+7*distance].im;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>buttefly<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/>r0<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/>r1<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/>r2<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>0.0000<sp/>+<sp/>1.0000i</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/>r3<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/>r4<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/>r5<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/>r6<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/>r7<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>float32_t<sp/>d13<sp/>=<sp/>d1<sp/>+<sp/>d3;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>float32_t<sp/>d1_3<sp/>=<sp/>d1<sp/>-<sp/>d3;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>float32_t<sp/>e13<sp/>=<sp/>e1<sp/>+<sp/>e3;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>float32_t<sp/>e57<sp/>=<sp/>e5<sp/>+<sp/>e7;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>float32_t<sp/>e1_3<sp/>=<sp/>e1<sp/>-<sp/>e3;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_57<sp/>=<sp/>e7<sp/>-<sp/>e5;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>float32_t<sp/>d57<sp/>=<sp/>d5<sp/>+<sp/>d7;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>float32_t<sp/>d_57<sp/>=<sp/>d7<sp/>-<sp/>d5;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp1<sp/>=<sp/>ROT_CONST*(d1_3+d_57);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp1b<sp/>=<sp/>ROT_CONST*(e57<sp/>-<sp/>e13);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp2<sp/>=<sp/>ROT_CONST*(d57-d13);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp2b<sp/>=<sp/>ROT_CONST*(e1_3<sp/>+<sp/>e_57);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>float32_t<sp/>d04<sp/><sp/><sp/>=<sp/>d0<sp/>+<sp/>d4;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0_4<sp/><sp/>=<sp/>d0<sp/>-<sp/>d4;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>float32_t<sp/>d26<sp/><sp/>=<sp/>d2<sp/>+<sp/>d6;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>float32_t<sp/>d_26<sp/><sp/>=<sp/>d6<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0246<sp/>=<sp/>d04<sp/>+<sp/>d26;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>float32_t<sp/>d1357<sp/>=<sp/>d13<sp/>+<sp/>d57;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0246<sp/>=<sp/>e0<sp/>+<sp/>e2<sp/>+<sp/>e4<sp/>+<sp/>e6;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0_4<sp/><sp/>=<sp/>e0<sp/>-<sp/>e4;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0_24_6<sp/>=<sp/>e0<sp/>-<sp/>e2<sp/>+<sp/>e4<sp/>-<sp/>e6;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>float32_t<sp/>e1357<sp/>=<sp/>e13<sp/>+<sp/>e57;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_13_57<sp/>=<sp/>e_57<sp/>-<sp/>e1_3;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>float32_t<sp/>e2_6<sp/>=<sp/>e2<sp/>-<sp/>e6<sp/>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_26<sp/>=<sp/>e6<sp/>-<sp/>e2<sp/>;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>r0.re<sp/>=<sp/>d0246<sp/>+<sp/>d1357;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//r1.re<sp/>=<sp/>d0<sp/>+<sp/>ROT_CONST*d1<sp/>-<sp/>ROT_CONST*d3<sp/>-<sp/>d4<sp/>-<sp/>ROT_CONST*d5<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>r1.re<sp/>=<sp/>d0_4<sp/>+<sp/>temp1;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>r7.re<sp/>=<sp/>r1.re<sp/>+<sp/>(e_26<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>r1.re<sp/>=<sp/>r1.re<sp/>-<sp/>(e_26<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>r2.re<sp/>=<sp/>d04<sp/>-<sp/>d26;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>r6.re<sp/>=<sp/>r2.re<sp/>+<sp/>e_13_57;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>r2.re<sp/>=<sp/>r2.re<sp/>-<sp/>e_13_57;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//r3.re<sp/>=<sp/>d0<sp/>-<sp/>ROT_CONST*d1<sp/>+<sp/>ROT_CONST*d3<sp/>-<sp/>d4<sp/>+<sp/>ROT_CONST*d5<sp/>-<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>r3.re<sp/>=<sp/>d0_4<sp/>-<sp/>temp1;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>r5.re<sp/>=<sp/>r3.re<sp/>+<sp/>(e2_6<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>r3.re<sp/>=<sp/>r3.re<sp/>-<sp/>(e2_6<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>r4.re<sp/>=<sp/>d0246<sp/>-<sp/>d1357;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>r0.im<sp/>=<sp/>e0246<sp/>+<sp/>e1357;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//r1.im<sp/>=<sp/>-ROT_CONST*d1<sp/>-<sp/>d2<sp/>-<sp/>ROT_CONST*d3<sp/>+<sp/>ROT_CONST*d5<sp/>+<sp/>d6<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>r1.im<sp/>=<sp/>d_26<sp/>+<sp/>temp2;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>r7.im<sp/>=<sp/>-r1.im<sp/>+<sp/>(<sp/>e0_4<sp/>+<sp/>temp2b);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>r1.im<sp/>=<sp/><sp/>r1.im<sp/>+<sp/>(<sp/>e0_4<sp/>+<sp/>temp2b);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>r2.im<sp/>=<sp/>d_57<sp/>-<sp/>d1_3;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>r6.im<sp/>=<sp/>-r2.im<sp/>+<sp/>e0_24_6;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>r2.im<sp/>=<sp/><sp/>r2.im<sp/>+<sp/>e0_24_6;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//r3.im<sp/>=<sp/>-ROT_CONST*d1<sp/>+<sp/>d2<sp/>-<sp/>ROT_CONST*d3<sp/>+<sp/>ROT_CONST*d5<sp/>-<sp/>d6<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>r3.im<sp/>=<sp/><sp/>temp2<sp/>-<sp/>d_26;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>r5.im<sp/>=<sp/>-r3.im<sp/>+<sp/>(e0_4<sp/>-<sp/>temp2b);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>r3.im<sp/>=<sp/><sp/>r3.im<sp/>+<sp/>(e0_4<sp/>-<sp/>temp2b);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>r4.im<sp/>=<sp/>e0246<sp/>-<sp/>e1357;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TWIDDLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>tw1<sp/>=<sp/>twiddle_ptr[twiddle_index*1];</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>tw2<sp/>=<sp/>twiddle_ptr[twiddle_index*2];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>tw3<sp/>=<sp/>twiddle_ptr[twiddle_index*3];</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>tw4<sp/>=<sp/>twiddle_ptr[twiddle_index*4];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>tw5<sp/>=<sp/>twiddle_ptr[twiddle_index*5];</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>tw6<sp/>=<sp/>twiddle_ptr[twiddle_index*6];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>tw7<sp/>=<sp/>twiddle_ptr[twiddle_index*7];</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>output[index]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>output[index+distance]<sp/><sp/><sp/>=<sp/>complex_mul(tw1,<sp/>r1);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>output[index+2*distance]<sp/>=<sp/>complex_mul(tw2,<sp/>r2);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>output[index+3*distance]<sp/>=<sp/>complex_mul(tw3,<sp/>r3);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>output[index+4*distance]<sp/>=<sp/>complex_mul(tw4,<sp/>r4);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>output[index+5*distance]<sp/>=<sp/>complex_mul(tw5,<sp/>r5);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>output[index+6*distance]<sp/>=<sp/>complex_mul(tw6,<sp/>r6);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>output[index+7*distance]<sp/>=<sp/>complex_mul(tw7,<sp/>r7);</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_last_radix4<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex<sp/>)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>float32_t<sp/>d1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+1].re;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>float32_t<sp/>d2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2].re;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>float32_t<sp/>d3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3].re;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>float32_t<sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+1].im;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>float32_t<sp/>e2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2].im;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>float32_t<sp/>e3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3].im;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>twiddles<sp/>are<sp/>all<sp/>1s*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>buttefly<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="724"><highlight class="comment">r0<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i</highlight></codeline>
<codeline lineno="725"><highlight class="comment">r1<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="726"><highlight class="comment">r2<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>0.0000<sp/>+<sp/>1.0000i</highlight></codeline>
<codeline lineno="727"><highlight class="comment">r3<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>r0.re<sp/>=<sp/>d0<sp/>+<sp/>d1<sp/>+<sp/>d2<sp/>+<sp/>d3;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>r1.re<sp/>=<sp/>d0<sp/>-<sp/>d2<sp/>-<sp/>(<sp/>e3<sp/>-<sp/>e1<sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>r2.re<sp/>=<sp/>d0<sp/>-<sp/>d1<sp/>+<sp/>d2<sp/>-<sp/>d3;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>r3.re<sp/>=<sp/>d0<sp/>-<sp/>d2<sp/>-<sp/>(<sp/>e1<sp/>-<sp/>e3<sp/>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>r0.im<sp/>=<sp/>e0<sp/>+<sp/>e1<sp/>+<sp/>e2<sp/>+<sp/>e3;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>r1.im<sp/>=<sp/>-d1<sp/>+<sp/>d3<sp/>+<sp/>e0<sp/>-<sp/>e2;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>r2.im<sp/>=<sp/>e0<sp/>-<sp/>e1<sp/>+<sp/>e2<sp/>-<sp/>e3;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>r3.im<sp/>=<sp/>d1<sp/>-<sp/>d3<sp/>+<sp/>e0<sp/>-<sp/>e2;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>output[outindex<sp/><sp/>]<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>output[outindex+1]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>output[outindex+2]<sp/>=<sp/>r2;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>output[outindex+3]<sp/>=<sp/>r3;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_butterfly_last_radix8<sp/>(<ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>input,<sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref>*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outindex<sp/>)</highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0,<sp/>d1,<sp/>d2,<sp/>d3,<sp/>d4,<sp/>d5,<sp/>d6,<sp/>d7;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0,<sp/>e1,<sp/>e2,<sp/>e3,<sp/>e4,<sp/>e5,<sp/>e6,<sp/>e7;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="structComplex__type__f32" kindref="compound">Complex_type_f32</ref><sp/>r0,<sp/>r1,<sp/>r2,<sp/>r3,<sp/>r4,<sp/>r7,<sp/>r6,<sp/>r5<sp/>;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].re;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>d1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+1].re;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>d2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2].re;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>d3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3].re;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>d4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+4].re;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>d5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+5].re;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>d6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+6].re;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>d7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+7].re;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>e0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index].im;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>e1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+1].im;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>e2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+2].im;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>e3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+3].im;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>e4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+4].im;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>e5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+5].im;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>e6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+6].im;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>e7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>input[index+7].im;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>twiddles<sp/>are<sp/>all<sp/>1s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>buttefly<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="778"><highlight class="comment">r0<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i</highlight></codeline>
<codeline lineno="779"><highlight class="comment">r1<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="780"><highlight class="comment">r2<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>0.0000<sp/>+<sp/>1.0000i</highlight></codeline>
<codeline lineno="781"><highlight class="comment">r3<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i</highlight></codeline>
<codeline lineno="782"><highlight class="comment">r4<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i</highlight></codeline>
<codeline lineno="783"><highlight class="comment">r5<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i</highlight></codeline>
<codeline lineno="784"><highlight class="comment">r6<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i</highlight></codeline>
<codeline lineno="785"><highlight class="comment">r7<sp/><sp/><sp/>1.0000<sp/>+<sp/>0.0000i<sp/><sp/><sp/>0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-0.0000<sp/>+<sp/>1.0000i<sp/><sp/>-0.7071<sp/>+<sp/>0.7071i<sp/><sp/>-1.0000<sp/>-<sp/>0.0000i<sp/><sp/>-0.7071<sp/>-<sp/>0.7071i<sp/><sp/><sp/>0.0000<sp/>-<sp/>1.0000i<sp/><sp/><sp/>0.7071<sp/>-<sp/>0.7071i</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Re(c1*c2)<sp/>=<sp/>c1.re*c2.re<sp/>-<sp/>c1.im*c2.im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>float32_t<sp/>d13<sp/>=<sp/>d1<sp/>+<sp/>d3;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>float32_t<sp/>d1_3<sp/>=<sp/>d1<sp/>-<sp/>d3;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>float32_t<sp/>e13<sp/>=<sp/>e1<sp/>+<sp/>e3;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>float32_t<sp/>e57<sp/>=<sp/>e5<sp/>+<sp/>e7;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>float32_t<sp/>e1_3<sp/>=<sp/>e1<sp/>-<sp/>e3;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_57<sp/>=<sp/>e7<sp/>-<sp/>e5;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>float32_t<sp/>d57<sp/>=<sp/>d5<sp/>+<sp/>d7;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>float32_t<sp/>d_57<sp/>=<sp/>d7<sp/>-<sp/>d5;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp1<sp/>=<sp/>ROT_CONST*(d1_3+d_57);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp1b<sp/>=<sp/>ROT_CONST*(e57<sp/>-<sp/>e13);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp2<sp/>=<sp/>ROT_CONST*(d57-d13);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>float32_t<sp/>temp2b<sp/>=<sp/>ROT_CONST*(e1_3<sp/>+<sp/>e_57);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>float32_t<sp/>d04<sp/><sp/><sp/>=<sp/>d0<sp/>+<sp/>d4;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0_4<sp/><sp/>=<sp/>d0<sp/>-<sp/>d4;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>float32_t<sp/>d26<sp/><sp/>=<sp/>d2<sp/>+<sp/>d6;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>float32_t<sp/>d_26<sp/><sp/>=<sp/>d6<sp/>-<sp/>d2;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>float32_t<sp/>d0246<sp/>=<sp/>d04<sp/>+<sp/>d26;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>float32_t<sp/>d1357<sp/>=<sp/>d13<sp/>+<sp/>d57;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0246<sp/>=<sp/>e0<sp/>+<sp/>e2<sp/>+<sp/>e4<sp/>+<sp/>e6;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0_4<sp/><sp/>=<sp/>e0<sp/>-<sp/>e4;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>float32_t<sp/>e0_24_6<sp/>=<sp/>e0<sp/>-<sp/>e2<sp/>+<sp/>e4<sp/>-<sp/>e6;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>float32_t<sp/>e1357<sp/>=<sp/>e13<sp/>+<sp/>e57;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_13_57<sp/>=<sp/>e_57<sp/>-<sp/>e1_3;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>float32_t<sp/>e2_6<sp/>=<sp/>e2<sp/>-<sp/>e6<sp/>;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>float32_t<sp/>e_26<sp/>=<sp/>e6<sp/>-<sp/>e2<sp/>;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>r0.re<sp/>=<sp/>d0246<sp/>+<sp/>d1357;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r1.re<sp/>=<sp/>d0<sp/>+<sp/>ROT_CONST*d1<sp/>-<sp/>ROT_CONST*d3<sp/>-<sp/>d4<sp/>-<sp/>ROT_CONST*d5<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>r1.re<sp/>=<sp/>d0_4<sp/>+<sp/>temp1;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>r7.re<sp/>=<sp/>r1.re<sp/>+<sp/>(e_26<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>r1.re<sp/>=<sp/>r1.re<sp/>-<sp/>(e_26<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>r2.re<sp/>=<sp/>d04<sp/>-<sp/>d26;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>r6.re<sp/>=<sp/>r2.re<sp/>+<sp/>e_13_57;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>r2.re<sp/>=<sp/>r2.re<sp/>-<sp/>e_13_57;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.re<sp/>=<sp/>d0<sp/>-<sp/>ROT_CONST*d1<sp/>+<sp/>ROT_CONST*d3<sp/>-<sp/>d4<sp/>+<sp/>ROT_CONST*d5<sp/>-<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>r3.re<sp/>=<sp/>d0_4<sp/>-<sp/>temp1;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>r5.re<sp/>=<sp/>r3.re<sp/>+<sp/>(e2_6<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>r3.re<sp/>=<sp/>r3.re<sp/>-<sp/>(e2_6<sp/>+<sp/>temp1b);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>r4.re<sp/>=<sp/>d0246<sp/>-<sp/>d1357;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Im(c1*c2)<sp/>=<sp/>c1.re*c2.im<sp/>+<sp/>c1.im*c2.re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>r0.im<sp/>=<sp/>e0246<sp/>+<sp/>e1357;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r1.im<sp/>=<sp/>-ROT_CONST*d1<sp/>-<sp/>d2<sp/>-<sp/>ROT_CONST*d3<sp/>+<sp/>ROT_CONST*d5<sp/>+<sp/>d6<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>r1.im<sp/>=<sp/>d_26<sp/>+<sp/>temp2;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>r7.im<sp/>=<sp/>-r1.im<sp/>+<sp/>(<sp/>e0_4<sp/>+<sp/>temp2b);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>r1.im<sp/>=<sp/><sp/>r1.im<sp/>+<sp/>(<sp/>e0_4<sp/>+<sp/>temp2b);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>r2.im<sp/>=<sp/>d_57<sp/>-<sp/>d1_3;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>r6.im<sp/>=<sp/>-r2.im<sp/>+<sp/>e0_24_6;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>r2.im<sp/>=<sp/><sp/>r2.im<sp/>+<sp/>e0_24_6;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>r3.im<sp/>=<sp/>-ROT_CONST*d1<sp/>+<sp/>d2<sp/>-<sp/>ROT_CONST*d3<sp/>+<sp/>ROT_CONST*d5<sp/>-<sp/>d6<sp/>+<sp/>ROT_CONST*d7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>r3.im<sp/>=<sp/><sp/>temp2<sp/>-<sp/>d_26;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>r5.im<sp/>=<sp/>-r3.im<sp/>+<sp/>(e0_4<sp/>-<sp/>temp2b);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>r3.im<sp/>=<sp/><sp/>r3.im<sp/>+<sp/>(e0_4<sp/>-<sp/>temp2b);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>r4.im<sp/>=<sp/>e0246<sp/>-<sp/>e1357;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>the<sp/>Last<sp/>step,<sp/>twiddle<sp/>factors<sp/>are<sp/>all<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/>output[outindex<sp/><sp/><sp/><sp/>]<sp/>=<sp/>r0;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/>output[outindex+1<sp/><sp/>]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/>output[outindex+2*1]<sp/>=<sp/>r2;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/>output[outindex+3*1]<sp/>=<sp/>r3;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/>output[outindex+4*1]<sp/>=<sp/>r4;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/>output[outindex+5*1]<sp/>=<sp/>r5;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/>output[outindex+6*1]<sp/>=<sp/>r6;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/>output[outindex+7*1]<sp/>=<sp/>r7;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/src/TransformFunctions/kernels/plp_cfft_f32s_xpulpv2.c"/>
  </compounddef>
</doxygen>

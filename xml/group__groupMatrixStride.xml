<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="group__groupMatrixStride" kind="group">
    <compoundname>groupMatrixStride</compoundname>
    <title>Strided Matrix operations</title>
    <innergroup refid="group__MatAddStride">Strided Matrix Addition</innergroup>
    <innergroup refid="group__MatCopyStride">Strided Matrix Copy</innergroup>
    <innergroup refid="group__MatFillIStride">strided identity matrix creation</innergroup>
    <innergroup refid="group__MatFillStride">strided matrix fill</innergroup>
    <innergroup refid="group__MatMultCmplxStride">Complex Matrix Matrix Multiplication</innergroup>
    <innergroup refid="group__BasicMatMultStride">Strided Matrix Matrix Multiplication</innergroup>
    <innergroup refid="group__MatMultTransCmplxStride">Complex Matrix Transpose Matrix Multiplication</innergroup>
    <innergroup refid="group__MatMultTransStride">Strided Matrix Transposed Matrix Multiplication</innergroup>
    <innergroup refid="group__MatScaleStride">Strided Matrix Scale</innergroup>
    <innergroup refid="group__MatSubStride">Strided Matrix Subtraction</innergroup>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module contains all matrix operations with strided access. Strided operations can be used to ooperate on a small region of an MxN matrix. All functions contain a <computeroutput>stride</computeroutput> parameter for each operand. The <computeroutput>stride</computeroutput> parameter is the number of elements between the start of each row. In other words, it is the number of columns of the original matrix.</para>
<para><simplesect kind="par"><title>Example: Assume the following 4x5 matrix:</title><para><formula id="8">\[
  \mathbf{A} = \left[\begin{array}{lllll}
     a_{00} &amp; a_{01} &amp; a_{02} &amp; a_{03} &amp; a_{04}\\
     a_{10} &amp; a_{11} &amp; a_{12} &amp; a_{13} &amp; a_{14}\\
     a_{20} &amp; a_{21} &amp; a_{22} &amp; a_{23} &amp; a_{24}\\
     a_{30} &amp; a_{31} &amp; a_{32} &amp; a_{33} &amp; a_{34}\\
  \end{array}\right]
\]</formula> It linear memory, it is <computeroutput>uint16_t pA[20] = [a_00, a_01, a_02, a_03, a_04, a_10, ..., a_34]</computeroutput> Per convention, the number of columns <computeroutput>N = 5</computeroutput> and the number of rows <computeroutput>M = 4</computeroutput>. Let&apos;s assume we wish to access only the sub matrix:  <formula id="9">\[
  \mathbf{A}_{1:2,1:3} = \left[\begin{array}{lll}
     a_{11} &amp; a_{12} &amp; a_{13}\\
     a_{21} &amp; a_{22} &amp; a_{23}\\
  \end{array}\right]
\]</formula> We can achieve this by passing the array as: <computeroutput>pSrcA = pA + N + 1</computeroutput>, <computeroutput>N = 3</computeroutput>, <computeroutput>M = 2</computeroutput> and <computeroutput>strideA = 5</computeroutput>. Notice that we need to change the pointer to the start of the matrix, and the dimensionality of the matrix. Also, <computeroutput>strideA</computeroutput> is the original width of the matrix. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
